// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduling.Infrastructure;

namespace Scheduling.Infrastructure.Migrations
{
    [DbContext(typeof(SchedulingContext))]
    [Migration("20200720211714_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Idempotency.IdempotentCommandRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnName("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CommandRequests");
                });

            modelBuilder.Entity("Scheduling.Domain.ScheduleDays.ScheduleDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CalendarDay")
                        .HasColumnName("CalendarDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ClientCanSelectTimeSlot")
                        .HasColumnName("ClientCanSelectTimeSlot")
                        .HasColumnType("bit");

                    b.Property<int>("DayOfWeek")
                        .HasColumnName("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkHours")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.HasIndex("StaffId")
                        .IsUnique()
                        .HasFilter("[StaffId] IS NOT NULL");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Scheduling.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Scheduling.Domain.Staff.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Scheduling.Domain.ScheduleDays.ScheduleDay", b =>
                {
                    b.HasOne("Scheduling.Domain.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("Scheduling.Domain.ScheduleDays.ScheduleDay", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduling.Domain.Staff.Staff", null)
                        .WithOne()
                        .HasForeignKey("Scheduling.Domain.ScheduleDays.ScheduleDay", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Scheduling.Domain.ScheduleDays.Appointment", "Appointments", b1 =>
                        {
                            b1.Property<Guid>("ScheduleDayId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ScheduleDayId", "Id");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("ScheduleDayId");

                            b1.OwnsOne("Scheduling.Domain.ScheduleDays.AppointmentStatus", "AppointmentStatus", b2 =>
                                {
                                    b2.Property<Guid>("AppointmentScheduleDayId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("AppointmentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Status")
                                        .IsRequired()
                                        .HasColumnName("Status")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AppointmentScheduleDayId", "AppointmentId");

                                    b2.ToTable("Appointments");

                                    b2.WithOwner()
                                        .HasForeignKey("AppointmentScheduleDayId", "AppointmentId");
                                });

                            b1.OwnsOne("Scheduling.Domain.ScheduleDays.AppointmentTimeSlot", "AppointmentTimeSlot", b2 =>
                                {
                                    b2.Property<Guid>("AppointmentScheduleDayId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("AppointmentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime>("AppointmentDay")
                                        .HasColumnName("AppointmentDay")
                                        .HasColumnType("datetime2");

                                    b2.Property<int?>("AppointmentStart")
                                        .HasColumnName("AppointmentStart")
                                        .HasColumnType("int");

                                    b2.HasKey("AppointmentScheduleDayId", "AppointmentId");

                                    b2.ToTable("Appointments");

                                    b2.WithOwner()
                                        .HasForeignKey("AppointmentScheduleDayId", "AppointmentId");
                                });

                            b1.OwnsOne("Scheduling.Domain.ScheduleDays.ContactInformation", "ContactInformation", b2 =>
                                {
                                    b2.Property<Guid>("AppointmentScheduleDayId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("AppointmentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasColumnName("Email")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasColumnName("FirstName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasColumnName("LastName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Phone")
                                        .IsRequired()
                                        .HasColumnName("PhoneNumber")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AppointmentScheduleDayId", "AppointmentId");

                                    b2.ToTable("Appointments");

                                    b2.WithOwner()
                                        .HasForeignKey("AppointmentScheduleDayId", "AppointmentId");
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
